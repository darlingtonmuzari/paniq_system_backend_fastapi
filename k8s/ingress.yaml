apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: panic-system-ingress
  namespace: panic-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.panicsystem.com,https://admin.panicsystem.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Platform,X-Attestation-Token"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range,API-Version,API-Deprecated,API-Sunset"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Security headers
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://unpkg.com; style-src 'self' 'unsafe-inline' https://unpkg.com; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' wss: https:;" always;
      
      # Rate limiting for emergency endpoints
      location ~* ^/api/v1/emergency/ {
        limit_req zone=emergency burst=5 nodelay;
      }
      
      # Rate limiting for auth endpoints
      location ~* ^/api/v1/auth/ {
        limit_req zone=auth burst=10 nodelay;
      }
spec:
  tls:
  - hosts:
    - api.panicsystem.com
    secretName: api-panicsystem-com-tls
  rules:
  - host: api.panicsystem.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: panic-system-api-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: panic-system-staging-ingress
  namespace: panic-system-staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Platform,X-Attestation-Token"
spec:
  tls:
  - hosts:
    - staging-api.panicsystem.com
    secretName: staging-api-panicsystem-com-tls
  rules:
  - host: staging-api.panicsystem.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: panic-system-api-service
            port:
              number: 80
---
# Rate limiting configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-rate-limit-config
  namespace: ingress-nginx
data:
  http-snippet: |
    # Define rate limiting zones
    limit_req_zone $binary_remote_addr zone=emergency:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/m;